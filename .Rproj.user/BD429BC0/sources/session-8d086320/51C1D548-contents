#webshot::install_phantomjs()
library(tidyverse)
library(shiny)
library(shinybusy)
library(parmesan)
library(hgchmagic) #767c3867535994f1a1fd8c24594d40db3128843d
#library(ltgeo)
# dsvizopts bff1582f4b6e17600bf92937adf100270c42b91d
# homodatum 6993e3f907579fc72cbbf605d1dd1184330f451b

source("call-data.R")
ui <-  fluidPage(
  tags$head(
    tags$link(rel="stylesheet", type="text/css", href="custom.css"),
    includeScript("www/handlers.js")
  ),
  busy_start_up(
    loader = tags$img(
      src = "img/loading_gris.gif",
      width = 100
    ),
    mode = "auto",#"manual",
    color = "#435b69",
    background = "#FFF"
  ),
  div(class = "layout-container",
      div(class = "layout-panels",
          div(class = "app-container",
              div(class = "panel top-malibu",
                  div (class = "panel-body",
                       uiOutput("menu_buttons"),
                       uiOutput("controls")
                  ),
                  div(class="footer",
                      tags$a(
                        img(src= 'img/logos-app-orca.png', align = "left", width = 240)))
              ),
              div(class = "panel",
                  div (class = "panel-body",
                       div(style="flex-grow: 1; min-width: 600px;",
                           div(class = "head-viz",
                               div(style = "display:flex;gap:20px;margin-bottom: 20px;align-items: flex-end;",
                                   "VISUALIZACIÓN",
                                   uiOutput("viz_icons")
                               ))),
                       div(class = "viz-nucleo",
                           #highchartOutput("hgch_viz")
                           uiOutput("viz_view")
                           #verbatimTextOutput("test")
                       )
                  )
              ),
              div(class = "panel",
                  div (class = "panel-body",
                       div(style="flex-grow: 1; min-width: 320px;",
                           "viz extra"
                       )
                  )
              )
          )
      )
  )
)


server <- function(input, output, session) {
  
  
  output$menu_buttons <- renderUI({
    dsapptools:::make_buttons(c("Inspecciones", "Aprehensiones"),
                              labels = c("Visitas de control", "Aprehensiones"), 
                              default_active = "Inspecciones")
  })
  
  id_data <- reactive({
    id <- input$last_click
    if (is.null(id)) id <- "Inspecciones"
    id
  })
  
  
  
  data <- reactiveValues()
  
  observe({
    if (is.null(id_data())) return()
    if (!is.null(data[[id_data()]])) {
      return()
    } else {
      data[[id_data()]] <- get_data(id_data())
    }
    
  })
  
  pickerOpts <- reactive({
    list(
      `actions-box` = TRUE,
      `deselect-all-text` = "Ninguno",
      `select-all-text` = "Todos",
      title = "Todos"
    )
  })
  
  insp_data <- reactive({
    if (is.null(id_data())) return()
    res <- FALSE
    if (id_data() == "Inspecciones") res <- TRUE
    res
  })
  
  deptos_inspecciones <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Inspecciones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$depto))
  })
  
  anios_inspecciones <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Inspecciones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$anio))
  })
  
  tipo_inspecciones <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Inspecciones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$tipo_establecimiento))
  })
  
  deptos_aprehension <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$depto))
  })
  
  anios_aprehension <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$anio))
  }) 
  
  cierre_aprehension <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    setdiff(sort(unique(data$cierre_establecimiento)), NA)
  })  
  
  pickerOptsAdd <- reactive({
    list(
      `live-search`=TRUE,
      `actions-box` = TRUE,
      `deselect-all-text` = "Ninguno",
      `select-all-text` = "Todos",
      title = "Todos"
      
    )
  })
  
  marca_aprehension <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    sort(unique(data$marca))
  })
  
  clase_aprehension <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    l <- lapply(unique(data$cat_producto), function(i) {
      df <- data |> filter(cat_producto %in% i)
      unique(df$clase_producto)
    })
    names(l) <- unique(data$cat_producto)
    l
  })
  
  var_num_opts <- reactive({
    if (is.null(id_data())) return()
    if (id_data() != "Aprehensiones") return()
    c("Cantidad de actas de aprehensión" = "cantidad",
      "Cantidad de productos aprehendidos" = "cantidad_productos",
      "Avalúo comercial" = "valor_comercial")
  })
  
  parmesan <- parmesan_load()
  parmesan_input <- parmesan_watch(input, parmesan)
  
  output_parmesan("controls",
                  input = input, output = output, session = session,
                  env = environment())
  
  list_inputs <- reactive({
    if (is.null(id_data())) return()
    if (id_data() == "Inspecciones") {
      anio_sel <- input$anioId
      if (!is.null(anio_sel)) {
        if (length(anio_sel) > 1) {
          anio_sel <- c(min(as.numeric(anio_sel)), max(as.numeric(anio_sel)))
        }
      }
      list(
        "depto" = input$deptosId,
        "anio" = anio_sel,
        "tipo_establecimiento" = input$establecimientoId
      )
    } else {
      anio_sel <- input$apre_anioId
      if (!is.null(anio_sel)) {
        if (length(anio_sel) > 1) {
          anio_sel <- c(min(as.numeric(anio_sel)), max(as.numeric(anio_sel)))
        }
      }
      list(
        "depto" = input$apre_deptosId,
        "anio" = anio_sel,
        "cierre_establecimiento" = input$apre_cierreId,
        "marca" = input$apre_marcaId,
        "clase_producto" = input$apre_claseId
      )
    }
  })
  
  dic_load <- reactive({
    if (is.null(id_data())) return()
    req(data[[id_data()]])
    data <- data[[id_data()]]
    dic <- homodatum::create_dic(data)
    dic$hdType[dic$hdType == "Yea"] <- "Num"
    dic$hdtype <- dic$hdType
    dic
  })
  
  data_filter <- reactive({
    req(list_inputs())
    data <- data[[id_data()]]
    ls <- list_inputs()
    df <- dsdataprep::data_filter(data = dplyr::as_tibble(data),
                                  dic = dplyr::as_tibble(dic_load()),
                                  var_inputs = ls,
                                  special_placeholder = NULL)
    
    df
  })
  
  
  
  actual_but <- reactiveValues(active = NULL)
  
  observe({
    if (is.null(input$viz_selection)) return()
    viz_rec <- c("line", "bar","map","table")
    if (input$viz_selection %in% viz_rec) {
      actual_but$active <- input$viz_selection
    } else {
      actual_but$active <- viz_rec[1]
    }
    
  })
  
  output$viz_icons <- renderUI({
    possible_viz <- c("line", "bar","map","table")
    shinyinvoer::buttonImageInput('viz_selection',
                                  " ",
                                  images = possible_viz,
                                  path = "viz_icons/",
                                  active = actual_but$active,
                                  imageStyle = list(shadow = TRUE,
                                                    borderColor = "#ffffff",
                                                    padding = "3px"))
    
  })
  
  data_viz <- reactive({
    if (is.null(id_data())) return()
    req(data_filter())
    if (nrow(data_filter()) == 0) return()
    if (is.null(actual_but$active)) return()
    if (actual_but$active %in% "table") return()
    df <- data_filter()
    if (id_data() == "Inspecciones") {
      var <- "code_depto"
      if (actual_but$active %in% c("line", "bar")) {
        var <- "anio"
        if (!is.null(input$anioId)) {
          if (length(input$anioId) == 1) var <- "fecha_am"
        }
        if (!is.null(input$deptosId)) var <- c("depto", var)
      }
      df <- dsdataprep::aggregation_data(df,
                                         agg = "count",
                                         agg_name = "conteo",
                                         group_var = var, 
                                         percentage = TRUE, 
                                         percentage_name = "porcentaje"
      )
    } else {
      var <- "code_depto"
      if (actual_but$active %in% c("line", "bar")) {
        var <- c("clase_producto", "anio")
        if (!is.null(input$anioId)) {
          if (length(input$anioId) == 1) var <- c("clase_producto", "fecha_ym")
        }
        # if (!is.null(input$deptosId)) var <- c("depto", var)
      }
      
      agg <- "count"
      var_num <- NULL
      if (!is.null(input$apre_numId)) {
        if (input$apre_numId != "cantidad") {
          agg <- "sum"
          var_num <- input$apre_numId 
        }
      }
      df <- dsdataprep::aggregation_data(df,
                                         agg = agg,
                                         agg_name = "conteo",
                                         group_var = var,
                                         to_agg = var_num,
                                         percentage = TRUE,
                                         percentage_name = "porcentaje"
      )
    }
    if ("code_depto" %in% names(df)) {
      df$code_depto <- sprintf("%02d", df$code_depto)
    }
    if ("anio" %in% names(df)) {
      df$anio <- as.character(df$anio)
    }
    
    print(df)
    df
  })
  
  
  viz_type <- reactive({
    if (is.null(id_data())) return()
    if (is.null(actual_but$active)) return()
    req(data_viz())
    if (nrow(data_viz()) == 0) return()
    type <- "DatNum"
    if (ncol(data_viz()) > 3) type <- "CatDatNum"
    if (actual_but$active != "line") {
      type <- gsub("Dat", "Cat", type)
    }
    if (actual_but$active == "map") {
      type <- "GcdNum"
    }
    
    type    
  })
  
  viz_func <- reactive({
    if (is.null(id_data())) return()
    if (is.null(actual_but$active)) return()
    req(viz_type())
    viz <- paste0("hgchmagic::hgch_", actual_but$active, "_", viz_type())
    if (actual_but$active == "map") viz <- "lfltmagic::lflt_choropleth_GcdNum"
    print(viz)
    viz
  })
  
  viz_opts <- reactive({
    if (is.null(id_data())) return()
    if (is.null(actual_but$active)) return()
    req(data_viz())
    if (nrow(data_viz()) == 0) return()
    #print(data_viz())
    opts <- list(
      data = data_viz(),
      #title = title_viz(),
      #caption = "",
      title_size = 15,
      text_family = "Fira Sans",
      title_family = "Fira Sans"#,
      # label_wrap_legend = 100,
      # legend_align = "center",
      #legend_verticalAlign = "top",
      #graph_type = "stacked",
      #format_sample_num = "10T",
      #format_numericSymbols = T,
      #tooltip = "{labelToShow}",
      #legend_maxHeight = 100,
      # background_color = "#ffffff",
      # map_name = "col_larg",
      # map_tiles = "CartoDB",
      # legend_show = F,
      # map_zoom = F,
      # map_min_zoom = 4,
      # map_max_zoom = 5#,
     # palette_colors = c("#d7d1ff", "#bcb5f6", "#a19ae5", "#8880ce", "#7268b1", "#5d518f", "#4b3c69")
    )
    
    
    opts
  })
  
  
  viz_down <- reactive({
    req(data_viz())
    req(viz_func())
    suppressWarnings(
      do.call(eval(parse(text = viz_func())), viz_opts())
    )
  })
  
  
  
  output$hgch_viz <- highcharter::renderHighchart({
    req(actual_but$active)
    req(data_viz())
    if (actual_but$active %in% c("table", "map")) return()
    viz_down()
  })
  
  # output$lflt_viz <- leaflet::renderLeaflet({
  #   req(actual_but$active)
  #   req(data_viz())
  #   if (!actual_but$active %in% c("map")) return()
  #   viz_down() #|>
  #   #leaflet::setView(lng = 0, lat = -5, 1.25)
  # })
  
  
  
  output$dt_viz <- DT::renderDataTable({
    req(actual_but$active)
    if (actual_but$active != "table") return()
    req(data_filter())
    df <- data_filter()
    dtable <- DT::datatable(df,
                            rownames = F,
                            selection = 'none',
                            options = list(
                              language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json'),
                              scrollX = T,
                              fixedColumns = TRUE,
                              fixedHeader = TRUE,
                              scrollY = "500px",
                              autoWidth = TRUE,
                              columnDefs = list(list(width = '600px', targets = c("Descripción")),
                                                list(width = '300px', targets = c("Título")))
                            ))
    dtable
  })
  
  output$viz_view <- renderUI({
    req(actual_but$active)
    print(input$)
    tx <- "No hay información para los filtros seleccionados"
    if (actual_but$active != "table") {
      if (is.null(data_viz())) return(tx)
    }
    
    viz <- actual_but$active
    if (viz %in% c("map")) {
      return()
      # shinycustomloader::withLoader(
      #   leaflet::leafletOutput("lflt_viz", height = 700),
      #   type = "html", loader = "loader4"
      # )
    } else if (viz == "table") {
      shinycustomloader::withLoader(
        DT::dataTableOutput("dt_viz"),
        type = "html", loader = "loader4"
      )
    } else {
      #shinycustomloader::withLoader(
      highcharter::highchartOutput("hgch_viz", height = 700)#,
      #  type = "html", loader = "loader4"
      #)
    }
  })
  
  
  
  
  
  output$test <- renderPrint({
    viz_opts()
  })
  
}



shinyApp(ui, server)

