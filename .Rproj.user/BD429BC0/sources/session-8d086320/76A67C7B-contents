webshot::install_phantomjs(force = FALSE)
library(dsapptools)
library(shiny)
library(shinyWidgets)
library(shinybusy)
library(parmesan)
library(hgchmagic)
library(lfltmagic)
library(dsmodules)
library(tokenizers)

ui <-
  fluidPage(
    tags$head(
      tags$link(rel="stylesheet", type="text/css", href="custom.css"),
      includeScript("www/iframeSizer.contentWindow.min.js"),
    ),
    busy_start_up(
      loader = tags$img(
        src = "img/logos/loading_gris.gif",
        width = 100
      ),
      mode = "manual",
      color = "#435b69",
      background = "#FFF"
    ),
    div(class = "layout-container",
        div(class = "layout-panels",
            div(class = "app-container",
                div(class = "panel top-malibu",
                    div (class = "panel-body",
                         div(class = "panel-title", style = "padding: 18px 0px 8px 0px;", "Filtros"),
                         uiOutput("controls")
                    )),
                div(class = "panel",
                    div (class = "panel-body body-width",
                         div(style="flex-grow: 1; min-width: 750px;",
                             div(class = "head-viz",
                                 div(style = "display:flex;gap:20px;margin-bottom: 20px;align-items: flex-end;",
                                     div(class = "panel-title" ,"Visualización"),
                                     uiOutput("viz_icons")),
                                 uiOutput("descargas")),
                             div(class = "viz-nucleo",
                                 verbatimTextOutput("aver"),
                                 uiOutput("viz_view")
                             )
                         )
                    )),
                div(class = "panel",
                    div (class = "panel-body",
                         div(class = "panel-title", style = "padding: 18px 0px 8px 0px;" ,"Detalle"),
                         div(style = "display:block;max-width: 300px;text-align: center;",
                             highchartOutput("world_detalle", width = 300),
                             highchartOutput("treemap_detalle", width = 300)
                         )
                    )
                )
            )
        )
    )
  )


server <-
  function(input, output, session) {


    # Renderizar graficos ------------------------------------------

    actual_but <- reactiveValues(active = NULL)

    observe({
      if (is.null(input$viz_selection)) return()
      viz_rec <- c("map", "line", "bar", "table")
      if (input$viz_selection %in% viz_rec) {
        actual_but$active <- input$viz_selection
      } else {
        actual_but$active <- viz_rec[1]
      }
    })

    # print viz
    output$viz_icons <- renderUI({
      possible_viz <- c("map", "line", "bar", "table")

      suppressWarnings(
        shinyinvoer::buttonImageInput("viz_selection",
                                      " ",
                                      images = possible_viz,
                                      tooltips = c("Mapa", "line", "Barras", "Tabla"),
                                      path = "img/viz_icons/",
                                      active = actual_but$active,
                                      imageStyle = list(shadow = TRUE,
                                                        borderColor = "#ffffff",
                                                        padding = "3px")
        )
      )
    })


    data_load <-
      isolate({
        reactivePoll(1000,
                     session,
                     checkFunc = function() {
                       df <-    "data/data_clean.RData"

                       if (file.exists(df))
                         file.info(df)$uid
                       else
                         shinyalert(title = "file",text = "Archivo no encontrado")
                     },

                     valueFunc = function() {
                       load_data <- "data-prep.R"

                       source(load_data)$value
                     }
        )
      })


    observe({
      if (is.null(data_load())) return()
      Sys.sleep(3)
      remove_start_up(timeout = 200)
    })


    # opciones para parmesan ------------------------------------------

    pickerOpts <- reactive({
      list(
        `actions-box` = TRUE,
        `deselect-all-text` = "Ninguno",
        `select-all-text` = "Todos",
        title = "Todos"
      )
    })


    instancias_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      unique(doc_join$`Instancia principal`)
    })

    tema_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(stringr::str_split(doc_join$Tema, pattern = ",") |> unlist()))
    })

    anio_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(doc_join$Año))
    })

    depto_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(stringr::str_split(doc_join$Nombre, pattern = ",") |>
                    unlist()))
    })

    orientacion_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(doc_join$`Orientación sexual`))
    })


    identidad_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(stringr::str_split(doc_join$`Identidad de género`, pattern = ",") |>
                    unlist()))
    })



    intersex_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(doc_join$Intersexual))
    })

    enfoque_ops <- reactive({
      req(data_load())
      doc_join <- data_load()
      sort(unique(doc_join$`Enfoque diferencial`))
    })

    # Renderizar inputs con parmesan ------------------------------------------

    parmesan <- parmesan_load()
    parmesan_input <- parmesan_watch(input, parmesan)

    output_parmesan("controls",
                    input = input, output = output, session = session,
                    env = environment())



    list_inputs <- reactive({
      list(
        "Instancia principal" = input$instanciasId,
        "Tema" = input$temaId,
        "Año" = input$anioId,
        "Nombre" = input$deptoId,
        "Orientación sexual" = input$orientacionId,
        "Identidad de género" = input$identidadId,
        "Intersexual" = input$intersexId,
        "Enfoque diferencial" = input$enfoqueId
      )
    })

    dic_load <- reactive({
      dic <- readr::read_csv("data/dic_clean.RData")
      dic
    })

    data_down <- reactive({
      req(list_inputs())
      ls <- list_inputs()
      df <- dsapptools::data_filter(data = dplyr::as_tibble(data_load()),
                                    dic = dplyr::as_tibble(dic_load()),
                                    var_inputs = ls,
                                    special_placeholder = NULL,
                                    .id = "id")

      indG <- grep("id_temas|id_tema_principal|id_tema_seq|id_doc_seq|id_deptos|Departamento|Tema principal Id|Tema principal Id|Instancia Id|Tipo sentencia Id", names(df))
      df <- df[,-indG]
      df
    })



    # data to viz -------------------------------------------------------------

    var_to_viz <- reactive({
      req(actual_but$active)
      var <- NULL

      if (actual_but$active %in% c("map")) var <- "Nombre"
      if (actual_but$active %in% c("line")) var <- "Año"
      if (actual_but$active %in% c("bar")) var <- "Instancia principal"

      var
    })


    data_viz <- reactive({
      req(actual_but$active)
      if (actual_but$active == "table") return()
      req(data_down())
      req(var_to_viz())
      if (nrow(data_down()) == 0) return()
      df <- dplyr::as_tibble(data_down())
      df <- df |>
        dsapptools::variable_selection(viz = actual_but$active,
                                       path = NULL, var_to_viz()) |>
        dsapptools::var_aggregation(dic = dic_load(),
                                    agg = "count",
                                    group_var = var_to_viz(),
                                    to_agg = NULL,
                                    name = "Total")

      if ("Año" %in% names(df)) {
        df <- df |> dplyr::filter(Año != "Sin información")
      }
      df
    })


    map_caption <- reactive({
      req(data_viz())
      req(actual_but$active)
      df <- data_viz()
      if (actual_but$active != "map") return()
      df <- df |> dplyr::filter(Nombre %in% c("Colombia", "Reservado"))
      if (nrow(df) == 0) return()

      HTML(
        paste0(
          purrr::map(unique(df$Nombre), function(i){
            total <- df |> dplyr::filter(Nombre %in% i)
            paste0(i, ": ", total$Total)
          }) |> unlist(), collapse = "</br>"
        )
      )
    })


    # viz styles --------------------------------------------------------------

    viz_opts <- reactive({
      req(data_viz())
      req(actual_but$active)
      df <- dplyr::as_tibble(data_viz())
      names(df)[2] <- "Total decisiones judiciales"
      caption_viz <- NULL
      if (actual_but$active == "map") {
        caption_viz <- map_caption()
      }
      myFunc <- NULL
      if (actual_but$active == "bar") {
        myFunc <- paste0("function(event) {Shiny.onInputChange('", 'hcClickedBar', "', {id:event.point.name, timestamp: new Date().getTime()});}")
      }
      if (actual_but$active == "line") {
        myFunc <- paste0("function(event) {Shiny.onInputChange('", 'hcClicked', "', {id:event.point.name, timestamp: new Date().getTime()});}")
      }

      opts <- list(
        data = df,
        orientation = "hor",
        ver_title = " ",
        hor_title = " ",
        caption = caption_viz,
        label_wrap_legend = 100,
        label_wrap = 40,
        text_family = "Roboto",
        background_color = "#ffffff",
        axis_line_y_size = 1,
        axis_line_color = "#B7B7B7",
        grid_y_color = "#B1B1B1",
        grid_x_color = "#B1B1B1",
        cursor = "pointer",
        map_zoom_snap = 0.25,
        map_zoom_delta = 0.25,
        map_tiles = "OpenStreetMap",
        legend_position = "bottomleft",
        border_weight = 0.3,
        format_sample_num = "1,234.",
        cursor = "pointer",
        clickFunction = htmlwidgets::JS(myFunc)
      )

      if (actual_but$active == "map") {
        opts$map_name <- "col_larg"
        opts$na_color <- "transparent"
        opts$palette_colors <- rev(c("#560016", "#7c0030", "#a3004d", "#cc006d", "#f0278a", "#fe5cb1", "#ff8bdb"))
      } else {
        opts$palette_colors <- "#2F89D7"
      }


      opts
    })


    # Render Viz --------------------------------------------------------------

    viz_down <- reactive({
      req(data_viz())
      viz <- dsapptools::viz_selection(data = data_viz(),
                                       dic = dic_load(),
                                       viz = actual_but$active,
                                       num_hType = TRUE)
      change <- "Cat"
      if(actual_but$active == "map") change <-  "Gnm"
      if(actual_but$active == "line") change <- "Yea"
      viz <- gsub("list|Cat", change, viz)
      suppressWarnings(do.call(eval(parse(text=viz)),viz_opts()))
    })



    output$hgch_viz <- highcharter::renderHighchart({
      req(actual_but$active)
      req(data_viz())
      if (actual_but$active %in% c("table", "map")) return()
      viz_down()
    })

    output$lflt_viz <- leaflet::renderLeaflet({
      req(actual_but$active)
      req(data_viz())
      if (!actual_but$active %in% c("map")) return()
      viz_down() #|>
      #leaflet::setView(lng = 0, lat = -5, 1.25)
    })



    output$dt_viz <- DT::renderDataTable({
      req(actual_but$active)
      if (actual_but$active != "table") return()
      req(data_down())
      df <- dplyr::as_tibble(data_down())
      # id_ind <- grep("id", names(df))
      # if (!identical(id_ind, integer())) {
      #   df <- df[,-id_ind]
      # }
      dtable <- DT::datatable(df,
                              rownames = F,
                              selection = 'none',
                              options = list(
                                language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json'),
                                scrollX = T,
                                fixedColumns = TRUE,
                                fixedHeader = TRUE,
                                scrollY = "500px",
                                autoWidth = TRUE,
                                columnDefs = list(list(width = '600px', targets = c("Descripción")),
                                                  list(width = '300px', targets = c("Título")))
                              ))
      dtable
    })

    output$viz_view <- renderUI({
      req(actual_but$active)
      tx <- "No hay información para los filtros seleccionados"
      if (actual_but$active != "table") {
        if (is.null(data_viz())) return(tx)
      }

      viz <- actual_but$active
      if (viz %in% c("map")) {
        shinycustomloader::withLoader(
          leaflet::leafletOutput("lflt_viz", height = 700),
          type = "html", loader = "loader4"
        )
      } else if (viz == "table") {
        shinycustomloader::withLoader(
          DT::dataTableOutput("dt_viz"),
          type = "html", loader = "loader4"
        )
      } else {
        #shinycustomloader::withLoader(
        highcharter::highchartOutput("hgch_viz", height = 700)#,
        #  type = "html", loader = "loader4"
        #)
      }
    })



    output$descargas <- renderUI({
      if (is.null(actual_but$active)) return()
      if (actual_but$active != "table") {
        dsmodules::downloadImageUI("download_viz", dropdownLabel ="Descargar", formats = c("jpeg", "pdf", "png", "html"), display = "dropdown", text = "Descargar")
      } else {
        dsmodules::downloadTableUI("dropdown_table", dropdownLabel = "Descargar", formats = c("csv", "xlsx", "json"), display = "dropdown", text = "Descargar")
      }
    })

    observe({
      dsmodules::downloadTableServer("dropdown_table", element = reactive(data_down()), formats = c("csv", "xlsx", "json"))
      dsmodules::downloadImageServer("download_viz", element = reactive(viz_down()), lib = "highcharter", formats = c("jpeg", "pdf", "png", "html"), file_prefix = "plot")
    })


    output$world_detalle <- renderHighchart({
      req(data_down())
      df <- dplyr::as_tibble(data_down())
      df <- df |>
        dsapptools::variable_selection(viz = "treemap",
                                       path = NULL, "Descripción") |>
        tidyr::drop_na()
      df <- dsvizprep::data_word_prep(data = df, ftype = "Cat", stopwords = TRUE) |>
        dplyr::group_by(words) |> dplyr::summarise(n = dplyr::n()) |> dplyr::arrange(-n)
      if (nrow(df) > 50) {
        df <- df[1:50,]
      }

      df$colores <- "#000000"

      hchart(df, "wordcloud", hcaes(name = words, weight = n, color = colores)) |>
        hc_title(text = "Palabras más repetidas en las decisiones judiciales sobre LGBTIQ+",
                 align = "left",
                 style = list(color = "#212121",
                              fontFamily = "Roboto",
                              fontSize = 11,
                              useHTML = TRUE)) |>
        hc_tooltip(headerFormat = NULL,
                   pointFormat = "{point.name}: {point.weight}") #|>
      # hc_add_theme(hc_theme_ds(colores = c("#2F89D7", "#FA3392", "#FF9100", "#EC1C24", "#89CD13", "#0B240C", "#FFE444")))
      # hgchmagic::hgch_wordCloud_CatNum(df,
      #                               title = "Palabras más repetidas en las decisiones judiciales sobre LGBTIQ+",
      #                               title_size = 11,
      #                               legend_show = FALSE,
      #                               text_family = "Roboto",
      #                               tooltip = "{words}",
      #                               palette_colors = c("#2F89D7", "#FA3392", "#FF9100",
      #                                                           "#EC1C24", "#89CD13", "#0B240C", "#FFE444"))
    })

    output$treemap_detalle <- renderHighchart({
      req(data_down())
      df <- dplyr::as_tibble(data_down())
      df <- df |>
        dsapptools::variable_selection(viz = "treemap",
                                       path = NULL, "Tema") |>
        tidyr::separate_rows(Tema, sep = ",") |>
        dplyr::group_by(Tema) |>
        dplyr::summarise(Total = dplyr::n())
      hgchmagic::hgch_treemap_CatNum(df,
                                     color_by = "Tema",
                                     title = "Temas que se abordan en decisiones judiciales sobre LGBTIQ+",
                                     title_size = 11,
                                     text_family = "Roboto",
                                     legend_show = FALSE,
                                     palette_colors = c("#2F89D7", "#FA3392", "#FF9100",
                                                                 "#EC1C24", "#89CD13", "#0B240C", "#FFE444"))
    })


    click_viz <- reactiveValues(id = NULL)

    observe({
      req(actual_but$active)
      if (actual_but$active == "map") {
        click_viz$id <- NULL
        if (is.null(input$lflt_viz_shape_click)) return()
        click_viz$id <- input$lflt_viz_shape_click
      }
      if (actual_but$active == "line") {
        click_viz$id <- NULL
        if (is.null(input$hcClicked)) return()
        click_viz$id <- input$hcClicked
      }
      if (actual_but$active == "bar") {
        click_viz$id <- NULL
        if (is.null(input$hcClickedBar)) return()
        click_viz$id <- input$hcClickedBar
      }
    })

    info_click <- reactiveValues(data = NULL, text = NULL)
    observe({
      if (is.null(click_viz$id$id)) return()
      if (actual_but$active == "map") {
      info_click$data <- list("Nombre" = click_viz$id$id)
      }
      if (actual_but$active == "line") {
        info_click$data <- list("Año" = click_viz$id$id)
      }
      if (actual_but$active == "bar") {
        info_click$data <- list("Instancia principal" = click_viz$id$id)
      }
    })

    observe({
      if (is.null(click_viz$id$id)) return()
      req(info_click$data)
      ls <- info_click$data
      df <- dsapptools::data_filter(data = dplyr::as_tibble(data_down()),
                                    dic = dplyr::as_tibble(dic_load()),
                                    var_inputs = ls,
                                    special_placeholder = NULL,
                                    .id = "id")
      if (nrow(df) == 0) return()
      info_click$text <- HTML(
        paste0(paste0("<b>",df$`Código documento`, ":</b> ",
                      df$Título, "<br/>"),
               collapse = "<br/>")
      )
    })


    observeEvent(click_viz$id,{
     req(info_click$text)
      showModal(modalDialog(
        title = click_viz$id$id,
        info_click$text,
        easyClose = TRUE,
        footer = NULL
      ))
    })


  }


shinyApp(ui, server)



